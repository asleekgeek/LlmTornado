@using LlmTornado.Chat.Web.Models

<div class="configuration-selector">
    <label for="runtime-config" class="config-label">Agent Configuration:</label>
    <div class="select-wrapper">
        <select id="runtime-config" @bind="SelectedConfiguration" disabled="@IsDisabled" class="config-select">
            @if (Configurations.Any())
            {
                @foreach (var config in Configurations)
                {
                    <option value="@config">@FormatConfigurationName(config)</option>
                }
            }
            else
            {
                <option value="">Loading configurations...</option>
            }
        </select>
        <div class="select-arrow">
            <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="6,9 12,15 18,9"></polyline>
            </svg>
        </div>
    </div>
    @if (!string.IsNullOrEmpty(ConfigurationDescription))
    {
        <div class="config-description">
            @ConfigurationDescription
        </div>
    }
</div>

@code {
    private string _selectedConfiguration = "";

    /// <summary>
    /// Available runtime configurations
    /// </summary>
    [Parameter, EditorRequired] public string[] Configurations { get; set; } = Array.Empty<string>();

    /// <summary>
    /// Currently selected configuration
    /// </summary>
    [Parameter] 
    public string SelectedConfiguration 
    { 
        get => _selectedConfiguration; 
        set 
        { 
            if (_selectedConfiguration != value)
            {
                _selectedConfiguration = value;
                _ = SelectedConfigurationChanged.InvokeAsync(value);
                _ = OnConfigurationChange.InvokeAsync(value);
            }
        } 
    }

    /// <summary>
    /// Whether the selector is disabled
    /// </summary>
    [Parameter] public bool IsDisabled { get; set; }

    /// <summary>
    /// Callback for when configuration changes (two-way binding)
    /// </summary>
    [Parameter] public EventCallback<string> SelectedConfigurationChanged { get; set; }

    /// <summary>
    /// Callback for when configuration selection changes
    /// </summary>
    [Parameter] public EventCallback<string> OnConfigurationChange { get; set; }

    protected override void OnParametersSet()
    {
        // Set default configuration if none selected and configurations are available
        if (string.IsNullOrEmpty(SelectedConfiguration) && Configurations.Any())
        {
            SelectedConfiguration = Configurations.First();
        }
    }

    /// <summary>
    /// Format configuration name for display - Using text prefixes instead of emojis
    /// </summary>
    private string FormatConfigurationName(string configName)
    {
        return configName switch
        {
            "ResearchAgentConfiguration" => "[Research] Research Agent",
            "MagenticOneConfiguration" => "[Magentic] Magentic One",
            "simple" => "[Simple] Simple Agent",
            "sequential" => "[Sequential] Sequential Workflow", 
            "handoff" => "[Handoff] Agent Handoff",
            "orchestration" => "[Orchestration] Complex Orchestration",
            "basic" => "[Basic] Basic Runtime",
            _ => $"[Config] {configName.Replace("Configuration", "").ToUpper()}"
        };
    }

    /// <summary>
    /// Get description for the selected configuration
    /// </summary>
    private string ConfigurationDescription => SelectedConfiguration switch
    {
        "ResearchAgentConfiguration" => "Advanced research agent with web search and analysis capabilities",
        "MagenticOneConfiguration" => "Multi-agent orchestration system for complex task coordination",
        "simple" => "Single agent for straightforward conversations and tasks",
        "sequential" => "Multiple agents working in sequence for complex workflows",
        "handoff" => "Agents that can hand off conversations to specialized agents",
        "orchestration" => "Advanced state machine-based agent orchestration",
        "basic" => "Basic runtime configuration for simple interactions",
        _ => $"Runtime configuration: {SelectedConfiguration?.Replace("Configuration", "")}"
    };
}