@using LlmTornado.Chat.Web.Models
@using LlmTornado.Chat.Web.Helpers

<div class="message @Message.CssClass" key="@Message.Id">
    <div class="message-header">
        <div class="message-meta">
            <span class="message-role">@Message.Role</span>
            <span class="message-timestamp">@Message.Timestamp.ToString("HH:mm:ss")</span>
        </div>
    </div>
    <div class="message-content">
        @if (!string.IsNullOrEmpty(Message.Base64File))
        {
            <div class="message-file-attachment">
                @{
                    var fileInfo = GetFileInfoFromBase64(Message.Base64File);
                }
                @if (fileInfo.IsImage)
                {
                    <div class="file-thumbnail">
                        <img src="@Message.Base64File" alt="Attached file" style="max-width: 32px; max-height: 32px; border-radius: 4px;" />
                    </div>
                }
                else
                {
                    <div class="file-icon">
                        @GetFileIcon(fileInfo.MimeType)
                    </div>
                }
                <div class="file-details">
                    <span class="file-type">@fileInfo.MimeType</span>
                    <span class="file-size">@fileInfo.FormattedSize</span>
                </div>
            </div>
        }
        
        @if (Message.IsMarkdown)
        {
            @((MarkupString)MarkdownHelper.ToHtml(Message.Content))
        }
        else if (Message.IsHtml)
        {
            @((MarkupString)Message.Content)
        }
        else
        {
            <div class="message-text">@Message.Content</div>
        }
    </div>
</div>

@code {
    /// <summary>
    /// The chat message to display
    /// </summary>
    [Parameter, EditorRequired] public ChatMessage Message { get; set; } = null!;

    /// <summary>
    /// Gets file information from a Base64 data string
    /// </summary>
    private LlmTornado.Chat.Web.Models.FileInfo GetFileInfoFromBase64(string base64Data)
    {
        if (string.IsNullOrEmpty(base64Data) || !base64Data.StartsWith("data:"))
        {
            return new LlmTornado.Chat.Web.Models.FileInfo { IsValid = false };
        }

        try
        {
            var parts = base64Data.Split(";");
            if (parts.Length < 2) return new LlmTornado.Chat.Web.Models.FileInfo { IsValid = false };

            var mimeType = parts[0].Substring(5); // Remove "data:" prefix
            var base64Part = parts[1];
            
            if (!base64Part.StartsWith("base64,"))
            {
                return new LlmTornado.Chat.Web.Models.FileInfo { IsValid = false };
            }

            var base64String = base64Part.Substring(7); // Remove "base64," prefix
            var sizeInBytes = (base64String.Length * 3) / 4; // Approximate size

            return new LlmTornado.Chat.Web.Models.FileInfo
            {
                IsValid = true,
                MimeType = mimeType,
                SizeInBytes = sizeInBytes,
                Base64Data = base64String
            };
        }
        catch
        {
            return new LlmTornado.Chat.Web.Models.FileInfo { IsValid = false };
        }
    }

    /// <summary>
    /// Gets the appropriate icon for the file type
    /// </summary>
    private string GetFileIcon(string mimeType)
    {
        return mimeType switch
        {
            "application/pdf" => "??",
            var type when type.StartsWith("image/") => "???",
            var type when type.StartsWith("audio/") => "??",
            var type when type.StartsWith("video/") => "??",
            var type when type.Contains("document") || type.Contains("text") => "??",
            _ => "??"
        };
    }
}