@using Microsoft.AspNetCore.Components.Web
@using LlmTornado.Chat.Web.Services

<div class="chat-input-container">
    <div class="input-wrapper">
        @if (!string.IsNullOrEmpty(SelectedFileBase64))
        {
            <div class="file-preview">
                <div class="file-info">
                    @if (FileInformation.IsImage)
                    {
                        <div class="file-thumbnail">
                            <img src="@SelectedFileBase64" alt="Selected file" style="max-width: 50px; max-height: 50px; border-radius: 4px;" />
                        </div>
                    }
                    else
                    {
                        <div class="file-icon">
                            @GetFileIcon(FileInformation.MimeType)
                        </div>
                    }
                    <div class="file-details">
                        <span class="file-type">@FileInformation.MimeType</span>
                        <span class="file-size">@FileInformation.FormattedSize</span>
                    </div>
                </div>
                <button class="file-remove-btn" @onclick="RemoveFile" type="button" title="Remove file">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M18 6L6 18M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
        }
        
        <div class="input-row">
            <InputFile OnChange="HandleFileSelected">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66L9.64 16.2a2 2 0 0 1-2.83-2.83l8.49-8.49"></path>
                </svg>
            </InputFile>
            
            <textarea @bind="CurrentMessage" 
                      @onkeydown="HandleKeyDown" 
                      class="chat-input" 
                      placeholder="Type your message here... (Markdown supported)" 
                      disabled="@IsDisabled"
                      rows="1"></textarea>
            
            <button @onclick="SendCurrentMessage" 
                    class="send-button" 
                    disabled="@(IsDisabled || (string.IsNullOrWhiteSpace(CurrentMessage) && string.IsNullOrEmpty(SelectedFileBase64)))">
                @if (IsDisabled)
                {
                    <div class="spinner"></div>
                }
                else
                {
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <line x1="22" y1="2" x2="11" y2="13"></line>
                        <polygon points="22,2 15,22 11,13 2,9 22,2"></polygon>
                    </svg>
                }
            </button>
        </div>
    </div>
</div>

@code {
    private string SelectedFileBase64 = "";
    private LlmTornado.Chat.Web.Models.FileInfo FileInformation = new();

    /// <summary>
    /// Current message text
    /// </summary>
    [Parameter] public string CurrentMessage { get; set; } = "";

    /// <summary>
    /// Whether the input is disabled (e.g., during message sending)
    /// </summary>
    [Parameter] public bool IsDisabled { get; set; }

    /// <summary>
    /// Callback for when message should be sent
    /// </summary>
    [Parameter] public EventCallback<(string message, string? base64File)> OnSendMessage { get; set; }

    /// <summary>
    /// Callback for when current message changes
    /// </summary>
    [Parameter] public EventCallback<string> CurrentMessageChanged { get; set; }

    /// <summary>
    /// Handles keyboard events (Enter to send)
    /// </summary>
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey && !IsDisabled && 
            (!string.IsNullOrWhiteSpace(CurrentMessage) || !string.IsNullOrEmpty(SelectedFileBase64)))
        {
            await SendCurrentMessage();
        }
    }

    /// <summary>
    /// Sends the current message with optional file attachment
    /// </summary>
    private async Task SendCurrentMessage()
    {
        await OnSendMessage.InvokeAsync((CurrentMessage, string.IsNullOrEmpty(SelectedFileBase64) ? null : SelectedFileBase64));
        
        // Clear the input after sending
        CurrentMessage = "";
        SelectedFileBase64 = "";
        FileInformation = new();
        await CurrentMessageChanged.InvokeAsync(CurrentMessage);
    }

    private string[] AcceptedMimeTypes = new[]
    {
        "image/jpeg", "image/png", "application/pdf", "application/msword", 
        "text/plain", "text/markdown", "application/json", "text/csv",
        "audio/mpeg", "audio/wav", "audio/ogg"
	};

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles(1)) 
        {
            if(file.ContentType == null || !AcceptedMimeTypes.Contains(file.ContentType))
            {
                // Invalid file type
                SelectedFileBase64 = "";
                FileInformation = new();
                // Could add a toast notification here for invalid file type
                continue;
			}
            // Access file properties like file.Name, file.Size, file.ContentType
            // Read the file content into a stream or byte array
            using var stream = file.OpenReadStream(maxAllowedSize: 50 * 1024 * 1024);// Limit file size, e.g., 50 MB

			// Convert stream to Base64
			using var memoryStream = new MemoryStream();
			await stream.CopyToAsync(memoryStream);
			var fileBytes = memoryStream.ToArray();
			SelectedFileBase64 = $"data:{file.ContentType};base64,{Convert.ToBase64String(fileBytes)}";
            FileInformation = FileInformation.GetFileInfo(SelectedFileBase64);
            // Process the stream, e.g., save to server, read content, etc.
        }

        StateHasChanged();
    }

    /// <summary>
    /// Removes the selected file
    /// </summary>
    private void RemoveFile()
    {
        SelectedFileBase64 = "";
        FileInformation = new();
        StateHasChanged();
    }

    /// <summary>
    /// Gets the appropriate icon for the file type
    /// </summary>
    private string GetFileIcon(string mimeType)
    {
        return mimeType switch
        {
            "application/pdf" => "??",
            var type when type.StartsWith("image/") => "???",
            var type when type.StartsWith("audio/") => "??",
            var type when type.StartsWith("video/") => "??",
            var type when type.Contains("document") || type.Contains("text") => "??",
            _ => "??"
        };
    }
}