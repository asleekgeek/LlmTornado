@using LlmTornado.Chat.Web.Models
@using LlmTornado.Chat.Web.Components.Chat

<div class="log-panel @(IsVisible ? "show" : "hide")">
    <div class="log-header">
        <div class="log-title">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                <polyline points="14,2 14,8 20,8"></polyline>
                <line x1="16" y1="13" x2="8" y2="13"></line>
                <line x1="16" y1="17" x2="8" y2="17"></line>
                <polyline points="10,9 9,9 8,9"></polyline>
            </svg>
            <h4>Event Logs</h4>
        </div>
        <div class="log-controls">
            <button class="btn btn-sm" @onclick="OnClearLogs">Clear</button>
            <button class="btn btn-sm btn-icon" @onclick="OnTogglePanel">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M18 6L6 18M6 6l12 12"></path>
                </svg>
            </button>
        </div>
    </div>
    
    <div class="log-content" id="log-content">
        @if (!LogEvents.Any())
        {
            <div class="log-empty">
                <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                    <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                    <polyline points="14,2 14,8 20,8"></polyline>
                </svg>
                <p>No events logged yet</p>
                <span>Events will appear here when the assistant processes your messages.</span>
            </div>
        }
        else
        {
            @foreach (var logEvent in LogEvents)
            {
                <LogEntry LogEvent="logEvent" />
            }
        }
    </div>
</div>

@code {
    /// <summary>
    /// Whether the log panel is visible
    /// </summary>
    [Parameter] public bool IsVisible { get; set; }

    /// <summary>
    /// List of log events to display
    /// </summary>
    [Parameter, EditorRequired] public List<LogEvent> LogEvents { get; set; } = new();

    /// <summary>
    /// Callback for when logs should be cleared
    /// </summary>
    [Parameter] public EventCallback OnClearLogs { get; set; }

    /// <summary>
    /// Callback for when panel should be toggled
    /// </summary>
    [Parameter] public EventCallback OnTogglePanel { get; set; }
}